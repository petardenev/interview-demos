AWSTemplateFormatVersion: "2010-09-09"
Description: "TBuilder Application Infrastructure"

Parameters:

  EcsImageId:
    Description: Image ID for running the ECS Cluster instances
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EcsInstanceType:
    # https://aws.amazon.com/ec2/instance-types/
    # The types of instances is limited to avoid mistakes generating huge costs by putting the wrong instance type.
    Description: Type of instances to be added to the ECS cluster
    Type: String
    Default: t3.large
    AllowedValues:
    - t3.large
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5a.large
    - m5a.xlarge
    - m5a.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5a.large
    - r5a.xlarge
    - r5a.2xlarge
    - r5a.4xlarge

  EcsMinSize:
    Description: Minimum number of instances in the ECS cluster
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5 # This is set to prevent accidental huge costs

  EcsMaxSize:
    Description: Maximum number of instances in the ECS cluster
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 5 # This is set to prevent accidental huge costs

  EcsDesiredCapacity:
    Description: Default number of instances in the ECS cluster
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5 # This is set to prevent accidental huge costs

  DomainName:
    Description: The domain for the Common Name of the wildcard certificate on the Load Balancer listener
    Type: String
    Default: nonprod.rreis.com

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-core

  AcmRoute53ApprovalLambdaStackName:
    Description: AcmRoute53ApprovalLambda stack name
    Type: String
    Default: acm-route53-auto-approver-lambda

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Compute
      Parameters:
      - ECSInstanceType
      - ECSMinSize
      - ECSMaxSize
      - ECSDesiredCapacity
      - ECSImageId
    ParameterLabels:
      InstanceType:
        default: AWS EC2 Instance Type for ECS nodes
      ECSMinSize:
        default: Minimum number of instances in the ECS cluster
      ECSMaxSize:
        default: Maximum number of instances in the ECS cluster
      ECSDesiredCapacity:
        default: Default number of instances in the ECS cluster

Resources:

  WildCardCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${DomainName}"
      ValidationMethod: DNS

  AcmRoute53ApprovalRequest:
    Type: Custom::AcmRoute53ApprovalRequest
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub "${AcmRoute53ApprovalLambdaStackName}:AcmRoute53ApproverLambdaArn"
      CloudFormationResourceName: WildCardCertificate
      CloudFormationStackName: !Sub ${AWS::StackName}
      HostedZoneId:
        Fn::ImportValue: !Sub ${InfrastructureStackName}:Route53HostedZoneID

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${AWS::StackName} Landscape LB"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LB"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      IpAddressType: dualstack
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: !Ref WildCardCertificate
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: text/html
          MessageBody: ""
          StatusCode: 404

  EcsCluster:
    Type: AWS::ECS::Cluster

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [!Sub "ec2.${AWS::URLSuffix}"]
          Action: ["sts:AssumeRole"]

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EcsInstanceRole]

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${AWS::StackName} Landscape ECS Cluster"
      VpcId:
        Fn::ImportValue: !Sub ${InfrastructureStackName}:VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS-Cluster"

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            '/etc/ecs/ecs.config':
              content: !Sub |
                ECS_CLUSTER=${EcsCluster}
                ECS_ENABLE_TASK_IAM_ROLE=true
              mode: "000644"
              owner: root
              group: root
    Properties:
      InstanceType: !Ref EcsInstanceType
      SecurityGroups:
      - !Ref EcsSecurityGroup
      IamInstanceProfile: !Ref EcsInstanceProfile
      ImageId: !Ref EcsImageId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y install aws-cfn-bootstrap amazon-ssm-agent
          systemctl enable --now amazon-ssm-agent
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EcsLaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region} || true

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupTotalInstances
      MinSize: !Ref EcsMinSize
      MaxSize: !Ref EcsMaxSize
      DesiredCapacity: !Ref EcsDesiredCapacity
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
          PropagateAtLaunch: true

Outputs:
  EcsCluster:
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${AWS::StackName}:EcsCluster"
  EcsSecurityGroup:
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}:EcsSecurityGroup"
  DomainName:
    Value: !Ref DomainName
    Export:
      Name: !Sub "${AWS::StackName}:DomainName"
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancer:DNSName"
  LoadBalancerCanonicalHostedZoneID:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancer:CanonicalHostedZoneID"
  LoadBalancerListener:
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancerListener"
